{"pageProps":{"post":{"mdxSource":"var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var o=e=>a(e,\"__esModule\",{value:!0});var p=(e,i)=>()=>(i||e((i={exports:{}}).exports,i),i.exports),f=(e,i)=>{o(e);for(var s in i)a(e,s,{get:i[s],enumerable:!0})},m=(e,i,s)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let n of l(i))!u.call(e,n)&&n!==\"default\"&&a(e,n,{get:()=>i[n],enumerable:!(s=h(i,n))||s.enumerable});return e},v=e=>m(o(a(e!=null?d(g(e)):{},\"default\",e&&e.__esModule&&\"default\"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var c=p((x,r)=>{r.exports=_jsx_runtime});var T={};f(T,{default:()=>w,frontmatter:()=>b});var t=v(c()),b={title:\"favorite article links\",date:new Date(167789874e4),lastmod:\"2023-03-04\",tags:[\"favorite\"],draft:!0,summary:\"\",layout:\"PostSimple\"};function y(e={}){let{wrapper:i}=e.components||{};return i?(0,t.jsx)(i,Object.assign({},e,{children:(0,t.jsx)(s,{})})):s();function s(){let n=Object.assign({p:\"p\"},e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:\"DB Schema Design: DB Schema design refers to the process of designing the database schema for your application. This involves determining the tables, fields, and relationships between them, as well as other details such as indexes and constraints. The goal of DB Schema design is to ensure that the database can efficiently store and retrieve the data needed by the application.\"}),(0,t.jsx)(n.p,{children:\"API Design: API design involves designing the interface between different components of the application, such as the frontend and the backend. This involves determining the endpoints that the frontend can call, the expected parameters and responses, and other details such as authentication and rate limiting. The goal of API design is to ensure that the different components of the application can communicate efficiently and securely.\"}),(0,t.jsx)(n.p,{children:\"Domain Design: Domain design involves designing the data models and business logic for the application. This involves determining the entities that the application will need to manage, the relationships between them, and the business rules that govern them. The goal of domain design is to ensure that the application can accurately and efficiently model the business domain it is designed for.\"}),(0,t.jsx)(n.p,{children:\"Client State Design: Client state design refers to the process of designing the client-side state management for your application. This involves determining how the application will manage the state of the user interface, such as which components are visible, which inputs have been entered, and which actions have been taken. The goal of client state design is to ensure that the user interface can respond quickly and accurately to user actions.\"}),(0,t.jsx)(n.p,{children:\"Authentication and authorization design - This includes designing the methods and protocols for authenticating and authorizing users of the web service.\"}),(0,t.jsx)(n.p,{children:\"Security design - This includes designing the security features and protocols for the web service to protect against attacks such as cross-site scripting (XSS) and SQL injection.\"}),(0,t.jsx)(n.p,{children:\"Caching and performance design - This includes designing the caching and performance strategies to optimize the speed and responsiveness of the web service.\"}),(0,t.jsx)(n.p,{children:\"Deployment and scalability design - This includes designing the deployment strategy and architecture for the web service to ensure that it can scale effectively as user traffic increases.\"}),(0,t.jsx)(n.p,{children:\"Testing and quality assurance design - This includes designing the testing and quality assurance processes and tools for the web service to ensure that it meets functional and non-functional requirements.\"}),(0,t.jsx)(n.p,{children:\"Logging and error handling design - This includes designing the logging and error handling strategies for the web service to enable effective debugging and troubleshooting.\"}),(0,t.jsx)(n.p,{children:\"Documentation and API documentation design - This includes designing the documentation and API documentation for the web service to enable users to understand how to use it effectively.\"}),(0,t.jsx)(n.p,{children:\"Third-party integration design - This includes designing the integration strategy for third-party services and tools that the web service needs to use, such as payment gateways or social media APIs.\"})]})}}var w=y;return T;})();\n;return Component;","toc":[],"frontMatter":{"readingTime":{"text":"3 min read","minutes":2.455,"time":147300,"words":491},"slug":"designs","fileName":"designs.mdx","title":"favorite article links","date":"2023-03-04T02:59:00.000Z","lastmod":"2023-03-04","tags":["favorite"],"draft":true,"summary":"","layout":"PostSimple"}},"authorDetails":[{"readingTime":{"text":"1 min read","minutes":0.155,"time":9300,"words":31},"slug":["default"],"fileName":"default.md","name":"demian11k","avatar":"/static/images/avatar.png","email":"demian11k@gmail.com","github":"https://github.com/demian9k","date":null}],"prev":{"title":"vscode config","date":"2023-09-12T01:01:00.000Z","lastmod":"2023-09-12","tags":["config"],"draft":false,"summary":"","layout":"PostSimple","slug":"vscode_settings.json"},"next":null},"__N_SSG":true}